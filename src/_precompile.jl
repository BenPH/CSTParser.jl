function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(CSTParser.read_comment, (Tokenize.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8,1}}},))
    precompile(CSTParser.read_ws, (Tokenize.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8,1}}}, Bool, Bool))
    precompile(CSTParser.lex_ws_comment, (Tokenize.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8,1}}}, Char))
    precompile(CSTParser.parse_module, (CSTParser.ParseState,))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.MODULE}}))
    precompile(CSTParser.parse_dot_mod, (CSTParser.ParseState, Bool))
    precompile(CSTParser.parse_imports, (CSTParser.ParseState,))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.IMPORT}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Import},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.EXPORT}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Export},))
    precompile(CSTParser.span, (CSTParser.EXPR{CSTParser.IDENTIFIER},))
    precompile(CSTParser.parse_block, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Block}, Array{Tokenize.Tokens.Kind,1}, Bool))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.FunctionDef},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Call},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.FUNCTION}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Abstract},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.ABSTRACT}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Generator},))
    precompile(CSTParser.parse_ranges, (CSTParser.ParseState,))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Flatten},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Filter},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Do},))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}))
    precompile(CSTParser.LtoR, (Int64,))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.BinaryOpCall},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_comma_sep, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, Bool, Bool))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Curly},))
    precompile(CSTParser.parse_comma_sep, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, Bool, Bool))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.IDENTIFIER},))
    precompile(CSTParser.parse_string_or_cmd, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.x_Cmd},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Quote},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.DOT,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Quotenode},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.BinarySyntaxOpCall},))
    precompile(CSTParser.parse_string_or_cmd, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Curly},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.UnaryOpCall},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Call},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.TupleH},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.If},))
    precompile(CSTParser.parse_if, (CSTParser.ParseState, Bool))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.IF}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.ChainOpCall},))
    precompile(CSTParser.parse_chain_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.BinaryOpCall},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}))
    precompile(CSTParser.parse_chain_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{8,Tokenize.Tokens.COLON,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.EX_OR,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.EX_OR,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.EX_OR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.EX_OR,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.EX_OR,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.EX_OR,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.EX_OR,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.EX_OR,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.EX_OR,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.EX_OR,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.UnarySyntaxOpCall},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Comparison},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.ANON_FUNC,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{4,Tokenize.Tokens.LAZY_OR,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{4,Tokenize.Tokens.LAZY_OR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Ref},))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{8,Tokenize.Tokens.COLON,false}}))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.END}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.StringH},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Macro},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.MACRO}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.DDDOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISA,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISA,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISA,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISA,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISA,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISA,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISA,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISA,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISA,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISA,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{5,Tokenize.Tokens.LAZY_AND,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{5,Tokenize.Tokens.LAZY_AND,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{5,Tokenize.Tokens.LAZY_AND,false}}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.UnaryOpCall},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{4,Tokenize.Tokens.LAZY_OR,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.For},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.FOR}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{4,Tokenize.Tokens.LAZY_OR,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.InvisBrackets},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{5,Tokenize.Tokens.LAZY_AND,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PLUS_EQ,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PLUS_EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Ref},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.TypedComprehension},))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{5,Tokenize.Tokens.LAZY_AND,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.QUOTE}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Primitive},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.PRIMITIVE}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Return},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.RETURN}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Let},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.LET}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.ANON_FUNC,false}}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Break},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.BREAK}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Const},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.CONST}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.is_func_call, (CSTParser.EXPR{CSTParser.BinarySyntaxOpCall},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.ModuleH},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.FileH}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.FileH},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.LITERAL{nothing}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.ModuleH}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.MODULE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.IDENTIFIER}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Block}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Import}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.IMPORT}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.DOT,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Export}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.EXPORT}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.PUNCTUATION{Tokenize.Tokens.COMMA}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.FunctionDef}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.FUNCTION}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.END}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Abstract}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.ABSTRACT}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.TYPE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Curly}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.PUNCTUATION{Tokenize.Tokens.LBRACE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.PUNCTUATION{Tokenize.Tokens.RBRACE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Call}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Quotenode}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.PUNCTUATION{Tokenize.Tokens.LPAREN}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.PUNCTUATION{Tokenize.Tokens.RPAREN}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.TupleH}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.If}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.IF}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.BinaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Quote}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{8,Tokenize.Tokens.COLON,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.InvisBrackets}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Comparison}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.EX_OR,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.ELSEIF}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.ANON_FUNC,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{4,Tokenize.Tokens.LAZY_OR,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Ref}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.PUNCTUATION{Tokenize.Tokens.LSQUARE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.PUNCTUATION{Tokenize.Tokens.RSQUARE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.ELSE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.MacroCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.GlobalRefDoc}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Macro}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.MACRO}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.DDDOT,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISA,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{5,Tokenize.Tokens.LAZY_AND,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.UnaryOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FALSE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.For}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.FOR}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRUE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PLUS_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.TypedComprehension}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Generator}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.QUOTE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Primitive}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.PRIMITIVE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Return}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.RETURN}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Let}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.LET}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Break}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.BREAK}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.x_Str}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Const}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.CONST}}, Array{Any,1}))
    precompile(CSTParser.utf8proc_map_custom, (String, Int64, Function))
    precompile(CSTParser.julia_normalization_map, (Int32, Ptr{Void}))
    precompile(CSTParser._get_import_block, (CSTParser.EXPR{CSTParser.Import}, Int64, Expr))
    precompile(CSTParser.expr_import, (CSTParser.EXPR{CSTParser.Import}, Symbol))
    precompile(CSTParser.sized_uint_literal, (String, Int64))
    precompile(CSTParser.sized_uint_oct_literal, (String,))
    precompile(CSTParser.span, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}},))
    precompile(CSTParser.fix_range, (CSTParser.EXPR{CSTParser.BinaryOpCall},))
    precompile(CSTParser.norm_ast, (Bool,))
    precompile(CSTParser.norm_ast, (Symbol,))
    precompile(CSTParser.norm_ast, (QuoteNode,))
    precompile(CSTParser.norm_ast, (Int64,))
    precompile(CSTParser.norm_ast, (String,))
    precompile(CSTParser.norm_ast, (GlobalRef,))
    precompile(CSTParser.remlineinfo!, (Expr,))
    precompile(CSTParser.remlineinfo!, (Bool,))
    precompile(CSTParser.remlineinfo!, (Symbol,))
    precompile(CSTParser.remlineinfo!, (Int64,))
    precompile(CSTParser.remlineinfo!, (String,))
    precompile(CSTParser.remlineinfo!, (GlobalRef,))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.USING}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Using},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Struct},))
    precompile(CSTParser.parse_struct, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FALSE}}))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.STRUCT}}))
    precompile(CSTParser.parse_struct, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRUE}}))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.MUTABLE}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Mutable},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{8,Tokenize.Tokens.COLON,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Vect},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.While},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.WHILE}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.DOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{5,Tokenize.Tokens.LAZY_AND,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Kw},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.ConditionalOpCall},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{2,Tokenize.Tokens.CONDITIONAL,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.MINUS_EQ,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.MINUS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{2,Tokenize.Tokens.CONDITIONAL,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.span, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}},))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_chain_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.ChainOpCall},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Try},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.TRY}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{4,Tokenize.Tokens.LAZY_OR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{8,Tokenize.Tokens.COLON,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{4,Tokenize.Tokens.LAZY_OR,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{8,Tokenize.Tokens.COLON,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.DOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Continue},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.CONTINUE}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQEQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.StringH},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.StringH}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{15,Tokenize.Tokens.WHERE,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{2,Tokenize.Tokens.CONDITIONAL,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.BEGIN}}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Begin},))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Global},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.GLOBAL}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.Local},))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.LOCAL}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Using}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.USING}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Struct}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.STRUCT}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Mutable}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.MUTABLE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Vect}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.While}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.WHILE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Kw}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Parameters}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.ConditionalOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{2,Tokenize.Tokens.CONDITIONAL,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.MINUS_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.ChainOpCall}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Try}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.TRY}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.FINALLY}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.LITERAL{:nothing}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Continue}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.CONTINUE}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQEQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{15,Tokenize.Tokens.WHERE,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Do}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.DO}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Begin}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.BEGIN}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Global}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.GLOBAL}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Local}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.LOCAL}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.CATCH}}, Array{Any,1}))
    precompile(CSTParser._get_import_block, (CSTParser.EXPR{CSTParser.Using}, Int64, Expr))
    precompile(CSTParser.expr_import, (CSTParser.EXPR{CSTParser.Using}, Symbol))
    precompile(CSTParser.fix_range, (CSTParser.EXPR{CSTParser.BinarySyntaxOpCall},))
    precompile(CSTParser.norm_ast, (Char,))
    precompile(CSTParser.norm_ast, (UInt8,))
    precompile(CSTParser.norm_ast, (Void,))
    precompile(CSTParser.remlineinfo!, (Char,))
    precompile(CSTParser.remlineinfo!, (UInt8,))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FALSE}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FALSE}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FALSE}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FALSE}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FALSE}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FALSE}}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FALSE}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FALSE}}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FALSE}},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FALSE}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRUE}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRUE}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRUE}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRUE}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRUE}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRUE}}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRUE}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRUE}}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRUE}},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRUE}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQEQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{5,Tokenize.Tokens.LAZY_AND,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Quotenode},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.STAR_EQ,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.STAR_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.longest_common_prefix, (String, String))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.x_Str},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.x_Str}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.MINUS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PLUS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{2,Tokenize.Tokens.CONDITIONAL,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.ColonOpCall},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{8,Tokenize.Tokens.COLON,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{4,Tokenize.Tokens.LAZY_OR,false}}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Curly}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{4,Tokenize.Tokens.LAZY_OR,false}}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.STAR_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.ColonOpCall}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQEQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ConditionalOpCall}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ConditionalOpCall}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ConditionalOpCall}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ConditionalOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ConditionalOpCall}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ConditionalOpCall}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ConditionalOpCall}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ConditionalOpCall}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.ConditionalOpCall},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ConditionalOpCall}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.DDDOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.DDDOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{8,Tokenize.Tokens.COLON,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.STAR_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISA,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.DOT,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Vcat}, Array{Any,1}))
    precompile(CSTParser.norm_ast, (Float64,))
    precompile(CSTParser.remlineinfo!, (Float64,))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CMD}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.DDDOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.DDDOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.AND_EQ,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.AND_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.DDDOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{8,Tokenize.Tokens.COLON,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PLUS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.TypedVcat},))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.AND_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.TypedVcat}, Array{Any,1}))
    precompile(CSTParser.norm_ast, (UInt64,))
    precompile(CSTParser.norm_ast, (UInt32,))
    precompile(CSTParser.remlineinfo!, (UInt64,))
    precompile(CSTParser.remlineinfo!, (UInt32,))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Comparison},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.EXPR{CSTParser.OPERATOR{4,Tokenize.Tokens.LAZY_OR,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Comprehension},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comprehension}, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.DDDOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Comprehension}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{15,Tokenize.Tokens.WHERE,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{2,Tokenize.Tokens.CONDITIONAL,false}}))
    precompile(CSTParser.parse_comma_sep, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{2,Tokenize.Tokens.CONDITIONAL,false}}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.XOR_EQ,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.XOR_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.XOR_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, CSTParser.EXPR{CSTParser.OPERATOR{8,Tokenize.Tokens.COLON,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.OR_EQ,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.OR_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.OR_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.AND_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.LBITSHIFT_EQ,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.LBITSHIFT_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,true}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,true}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,true}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,true}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,true}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,true}}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,true}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,true}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.REM_EQ,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.REM_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.OR_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.LBITSHIFT_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.APPROX,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.REM_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.UNSIGNED_BITSHIFT,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Quote},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{8,Tokenize.Tokens.DDOT,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,true}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_chain_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}))
    precompile(CSTParser.norm_ast, (UInt16,))
    precompile(CSTParser.remlineinfo!, (UInt16,))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.ANON_FUNC,false}}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quote}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Do},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.XOR_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.norm_ast, (UInt128,))
    precompile(CSTParser.remlineinfo!, (UInt128,))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.BAREMODULE}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.BareModule},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.BareModule}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.BAREMODULE}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.TypedComprehension},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TypedComprehension}, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.DDDOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.DOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.DOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,true}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,true}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,true}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,true}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,true}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,true}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,true}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,true}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,true}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,true}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,true}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,true}}))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,true}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUBTYPE,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT,true}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Vect}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_kw, (CSTParser.ParseState, Type{Val{Tokenize.Tokens.IMPORTALL}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.ImportAll},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.ImportAll}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.IMPORTALL}}, Array{Any,1}))
    precompile(CSTParser._get_import_block, (CSTParser.EXPR{CSTParser.ImportAll}, Int64, Expr))
    precompile(CSTParser.expr_import, (CSTParser.EXPR{CSTParser.ImportAll}, Symbol))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.EXPR{CSTParser.OPERATOR{15,Tokenize.Tokens.WHERE,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.FWD_SLASH_EQ,true}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.FWD_SLASH_EQ,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.EXPR{CSTParser.OPERATOR{5,Tokenize.Tokens.LAZY_AND,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,true}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.PRIME,true}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.FWD_SLASH_EQ,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.PRIME,true}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{2,Tokenize.Tokens.CONDITIONAL,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.ANON_FUNC,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IDENTICAL_TO,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IDENTICAL_TO,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ISSUPERTYPE,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.RING_OPERATOR,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.SQUARE_ROOT,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.CUBE_ROOT,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ALMOST_EQUAL_TO,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.UNICODE_DOT,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.MULTIPLICATION_SIGN,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.CONTAINS_AS_MEMBER,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.INTERSECTION,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.UNION,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.FWD_SLASH_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.CIRCUMFLEX_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.norm_ast, (Float32,))
    precompile(CSTParser.remlineinfo!, (Float32,))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Quotenode}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ALMOST_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ALMOST_EQUAL_TO,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ALMOST_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.RBITSHIFT_EQ,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.RBITSHIFT_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.EXPR{CSTParser.OPERATOR{2,Tokenize.Tokens.CONDITIONAL,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.RBITSHIFT_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQEQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.DIVISION_EQ,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.DIVISION_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.MINUS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{4,Tokenize.Tokens.LAZY_OR,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SQUARE_IMAGE_OF_OR_EQUAL_TO,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.DIVISION_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.ANON_FUNC,false}}))
    precompile(CSTParser.norm_ast, (Int128,))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.PRIME,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.PRIME,false}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{5,Tokenize.Tokens.LAZY_AND,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,true}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.FLOAT}}, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.DDDOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.MacroCall},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.MacroCall}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.STAR_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Curly}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PLUS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IDENTICAL_TO,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IDENTICAL_TO,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IDENTICAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IDENTICAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IDENTICAL_TO,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IDENTICAL_TO,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IDENTICAL_TO,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IDENTICAL_TO,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IDENTICAL_TO,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IDENTICAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IDENTICAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IDENTICAL_TO,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IDENTICAL_TO,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IDENTICAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IDENTICAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IDENTICAL_TO,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IDENTICAL_TO,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IDENTICAL_TO,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IDENTICAL_TO,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IDENTICAL_TO,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IDENTICAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IDENTICAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.XOR,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.PRIME,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.PRIME,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.RING_OPERATOR,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.RING_OPERATOR,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.RING_OPERATOR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.RING_OPERATOR,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.RING_OPERATOR,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.RING_OPERATOR,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.RING_OPERATOR,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.RING_OPERATOR,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.RING_OPERATOR,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.RING_OPERATOR,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.LPIPE,false}}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.OR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.OR_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.AND_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.MINUS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.RBITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.DOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,true}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,true}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PAIR_ARROW,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.AND,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,true}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{12,Tokenize.Tokens.FWDFWD_SLASH,true}}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.CONTAINS_AS_MEMBER,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.CONTAINS_AS_MEMBER,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.CONTAINS_AS_MEMBER,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.CONTAINS_AS_MEMBER,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.CONTAINS_AS_MEMBER,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.CONTAINS_AS_MEMBER,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.CONTAINS_AS_MEMBER,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.CONTAINS_AS_MEMBER,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.CONTAINS_AS_MEMBER,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.CONTAINS_AS_MEMBER,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.DOES_NOT_CONTAIN_AS_MEMBER,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.DDDOT,false}}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Curly}, CSTParser.EXPR{CSTParser.Comprehension}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.DIVISION_SIGN,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.UNION,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.UNION,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.UNION,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.UNION,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.UNION,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.UNION,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.UNION,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.UNION,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.UNION,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.UNION,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.UNION,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.INTERSECTION,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.INTERSECTION,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.INTERSECTION,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.INTERSECTION,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.INTERSECTION,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.INTERSECTION,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.INTERSECTION,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.INTERSECTION,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.INTERSECTION,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.INTERSECTION,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.INTERSECTION,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_OR_EQUAL_TO,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUPERSET_OF_WITH_NOT_EQUAL_TO,false}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IN,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{2,Tokenize.Tokens.CONDITIONAL,false}}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.STRING}}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.COLON_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.NOT_SIGN,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{20,Tokenize.Tokens.QUAD_ROOT,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.BACKSLASH_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PLUS_EQ,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.MINUS_EQ,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.STAR_EQ,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.BACKSLASH_EQ,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.CIRCUMFLEX_EQ,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.AND_EQ,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.OR_EQ,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.DIVISION_EQ,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.REM_EQ,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.UNSIGNED_BITSHIFT_EQ,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.RBITSHIFT_EQ,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.LBITSHIFT_EQ,true}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EX_OR_EQ,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUSPLUS,false}}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.BITSTYPE}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.PLUS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ELEMENT_OF,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.REM,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,true}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.PRIME,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.MINUS,true}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.TupleH}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.DECLARATION,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.UNICODE_DOT,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.UNICODE_DOT,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.UNICODE_DOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.UNICODE_DOT,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.UNICODE_DOT,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.UNICODE_DOT,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.UNICODE_DOT,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.UNICODE_DOT,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.UNICODE_DOT,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.UNICODE_DOT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.UNICODE_DOT,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.MULTIPLICATION_SIGN,false}}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.MULTIPLICATION_SIGN,false}}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.MULTIPLICATION_SIGN,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.MULTIPLICATION_SIGN,false}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.MULTIPLICATION_SIGN,false}}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.MULTIPLICATION_SIGN,false}}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.MULTIPLICATION_SIGN,false}}))
    precompile(CSTParser.issyntaxunarycall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.MULTIPLICATION_SIGN,false}},))
    precompile(CSTParser.parse_unary, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.MULTIPLICATION_SIGN,false}}))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.MULTIPLICATION_SIGN,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.MULTIPLICATION_SIGN,false}}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.ChainOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.ALMOST_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,true}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,true}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,true}}, Array{Any,1}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.MacroCall}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Begin},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Begin}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Filter}, Array{Any,1}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.KEYWORD{Tokenize.Tokens.TYPEALIAS}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_THAN_OR_EQUAL_TO,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Vcat},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Vcat}, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Hcat},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Hcat}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.PRIME,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Hcat}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.STAR_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{10,Tokenize.Tokens.LBITSHIFT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_IS,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRIPLE_STRING}},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRIPLE_STRING}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,true}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,true}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,true}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,true}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnaryOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.FWD_SLASH_EQ,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.FWD_SLASH_EQ,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Row}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.PRIME,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.FWD_SLASH_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,true}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,true}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.EQ,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,true}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,true}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,true}}))
    precompile(CSTParser._parse_ref, (CSTParser.EXPR{CSTParser.Comprehension}, CSTParser.EXPR{CSTParser.Vect}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,true}}, Array{Any,1}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.UnarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS_EQ,false}}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQ,true}}, Array{Any,1}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.STAR_EQ,true}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{1,Tokenize.Tokens.STAR_EQ,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.PRIME,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Comparison}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.EQEQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.PRIME,true}}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.RING_OPERATOR,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.RING_OPERATOR,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.FWD_SLASH,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{16,Tokenize.Tokens.PRIME,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.InvisBrackets}, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{13,Tokenize.Tokens.CIRCUMFLEX_ACCENT,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.BACKSLASH,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_EQUAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRUE}}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.ANON_FUNC,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, CSTParser.EXPR{CSTParser.OPERATOR{14,Tokenize.Tokens.ANON_FUNC,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.IDENTICAL_TO,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Call}, CSTParser.EXPR{CSTParser.OPERATOR{7,Tokenize.Tokens.RPIPE,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.IDENTIFIER}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.SUBSET_OF_OR_EQUAL_TO,false}}))
    precompile(CSTParser.update_span!, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRIPLE_CMD}},))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.TRIPLE_CMD}}, Array{Any,1}))
    precompile(CSTParser.parse_generator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_do, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.isajuxtaposition, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.STAR,false}}))
    precompile(CSTParser.parse_call, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_curly, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_ref, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.parse_tuple, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.isunaryop, (CSTParser.EXPR{CSTParser.Generator},))
    precompile(CSTParser.parse_compound, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Generator}))
    precompile(CSTParser.check_span, (CSTParser.EXPR{CSTParser.Flatten}, Array{Any,1}))
    precompile(CSTParser.issyntaxcall, (CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.INTERSECTION,false}},))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{11,Tokenize.Tokens.INTERSECTION,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Do}, CSTParser.EXPR{CSTParser.OPERATOR{2,Tokenize.Tokens.CONDITIONAL,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.NOT_AN_ELEMENT_OF,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.INTEGER}}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.BinarySyntaxOpCall}, CSTParser.EXPR{CSTParser.OPERATOR{9,Tokenize.Tokens.PLUS,true}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.Ref}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.GREATER_EQ,false}}))
    precompile(CSTParser.parse_operator, (CSTParser.ParseState, CSTParser.EXPR{CSTParser.LITERAL{Tokenize.Tokens.CHAR}}, CSTParser.EXPR{CSTParser.OPERATOR{6,Tokenize.Tokens.LESS,false}}))
end
